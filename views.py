import os
import openai
from pptx import Presentation
from pptx.util import Inches, Pt
from django.core.files.base import ContentFile
from rest_framework.decorators import api_view
from rest_framework.response import Response
from .models import Presentation
from .serializers import PresentationSerializer

openai.api_key = os.getenv('OPENAI_API_KEY')

@api_view(['POST'])
def create_presentation(request):
    topic = request.data.get('topic')
    slide_count = int(request.data.get('slides', 5))

    response = openai.ChatCompletion.create(
        model='gpt-3.5-turbo',
        messages=[
            {'role': 'system', 'content': 'You are an assistant that writes slide summaries.'},
            {'role': 'user', 'content': f'Write {slide_count} slide bullet summaries on: {topic}'}
        ]
    )

    content = response['choices'][0]['message']['content']
    slides = content.split('\n\n')

    prs = Presentation()
    title_slide_layout = prs.slide_layouts[0]
    slide = prs.slides.add_slide(title_slide_layout)
    slide.shapes.title.text = topic
    slide.placeholders[1].text = "Auto-generated by LLM"

    bullet_layout = prs.slide_layouts[1]

    for text in slides:
        slide = prs.slides.add_slide(bullet_layout)
        shapes = slide.shapes
        shapes.title.text = topic
        body_shape = shapes.placeholders[1]
        tf = body_shape.text_frame
        for bullet in text.split('\n'):
            if bullet.strip():
                tf.add_paragraph().text = bullet.strip()

    from io import BytesIO
    ppt_io = BytesIO()
    prs.save(ppt_io)
    ppt_io.seek(0)

    presentation = Presentation.objects.create(topic=topic, slide_count=slide_count)
    presentation.pptx_file.save(f"{topic}.pptx", ContentFile(ppt_io.read()))
    presentation.save()

    serializer = PresentationSerializer(presentation)
    return Response(serializer.data)
